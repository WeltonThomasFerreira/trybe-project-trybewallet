{"version":3,"sources":["actions/index.js","pages/Login.jsx","components/header/Header.jsx","components/form/Input.jsx","components/form/Select.jsx","components/form/Form.jsx","pages/Wallet.jsx","App.jsx","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.jsx"],"names":["module","exports","inputEmail","value","type","payload","setCurrencies","addExpenses","isLoginValid","email","password","isPasswordValid","length","test","Login","props","useState","state","setState","dispatch","useDispatch","handleChange","event","target","name","data-testid","placeholder","onChange","disabled","onClick","history","push","handleSubmit","Header","form","children","expenses","sum","map","expense","parseInt","exchangeRates","currency","ask","reduce","acc","cur","Intl","NumberFormat","style","format","replace","sumExpenses","Input","label","id","htmlFor","Select","options","option","key","Form","formState","description","method","tag","currencies","button","filterAPI","response","Object","keys","filter","Wallet","setFormState","useSelector","user","wallet","a","fetch","json","useEffect","result","fetchData","defaultProps","App","path","component","exact","Boolean","window","location","hostname","match","initialState","rootReducers","combineReducers","action","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8HAeAA,EAAOC,QAAU,CACfC,WAhBiB,SAACC,GAAD,MAAY,CAC7BC,KAAM,aACNC,QAASF,IAeTG,cAZoB,SAACH,GAAD,MAAY,CAChCC,KAAM,oBACNC,QAASF,IAWTI,YARkB,SAACJ,GAAD,MAAY,CAC9BC,KAAM,kBACNC,QAASF,M,kMCNX,SAASK,EAAaC,EAAOC,GAC3B,IACMC,EAAkBD,EAASE,QADd,EAInB,MAFmB,kCACaC,KAAKJ,IACdE,EAQV,SAASG,EAAMC,GAAQ,IAAD,EACTC,mBAAS,CAAEP,MAAO,GAAIC,SAAU,KADvB,mBAC5BO,EAD4B,KACrBC,EADqB,KAE3BT,EAAoBQ,EAApBR,MAAOC,EAAaO,EAAbP,SACTS,EAAWC,cAEjB,SAASC,EAAaC,GAAQ,IAAD,EACHA,EAAMC,OAAtBC,EADmB,EACnBA,KAAMrB,EADa,EACbA,MACde,EAAS,2BAAKD,GAAN,kBAAcO,EAAOrB,KAG/B,OACE,8BACE,kCACE,2BACEC,KAAK,QACLoB,KAAK,QACLC,cAAY,cACZC,YAAY,kBACZvB,MAAQM,EACRkB,SAAWN,IAEb,2BACEjB,KAAK,WACLoB,KAAK,WACLC,cAAY,iBACZC,YAAY,QACZvB,MAAQO,EACRiB,SAAWN,IAEb,4BACEO,UAAYpB,EAAaC,EAAOC,GAChCN,KAAK,SACLyB,QAAU,WACRV,EAASjB,qBAAWO,IAtChC,SAAsBM,GACAA,EAAZe,QACAC,KAAK,aAqCHC,CAAajB,KALjB,Y,6BC9BO,SAASkB,EAAOlB,GAAQ,IACnBmB,EAA0BnB,EAApCoB,SAAgB1B,EAAoBM,EAApBN,MAAO2B,EAAarB,EAAbqB,SAE/B,OACE,oCACE,gCACE,0BAAMX,cAAY,eAAlB,iBAA2ChB,IAC3C,0BAAMgB,cAAY,eAAlB,yBAtBR,SAAqBW,GACnB,IAAMC,EAAMD,EACTE,KACC,SAACC,GAAD,OAAaC,SAASD,EAAQpC,MAAO,IACjCoC,EAAQE,cAAcF,EAAQG,UAAUC,OAE7CC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,IAAK,GACnC,OAAO,IAAIC,KAAKC,aAAa,QAAS,CACpCC,MAAO,WACPP,SAAU,QAETQ,OAAOb,GACPc,QAAQ,IAAK,KAWWC,CAAYhB,IAC/B,0BAAMX,cAAY,yBAAlB,SAGHS,GC3BQ,SAASmB,EAAMtC,GAAQ,IAC5BuC,EAAyCvC,EAAzCuC,MAAOlD,EAAkCW,EAAlCX,KAAMmD,EAA4BxC,EAA5BwC,GAAIpD,EAAwBY,EAAxBZ,MAAOkB,EAAiBN,EAAjBM,aAChC,OACE,2BAAOmC,QAAUD,GACdD,EADH,IAGE,2BACElD,KAAOA,EACPoB,KAAO+B,EACPA,GAAKA,EACL7B,YAAc4B,EACdnD,MAAQA,EACRwB,SAAWN,KCXJ,SAASoC,EAAO1C,GAAQ,IAC7BuC,EAA4CvC,EAA5CuC,MAAOC,EAAqCxC,EAArCwC,GAAIG,EAAiC3C,EAAjC2C,QAASvD,EAAwBY,EAAxBZ,MAAOkB,EAAiBN,EAAjBM,aACnC,OACE,2BAAOmC,QAAUD,GACdD,EADH,IAGE,4BAAQ9B,KAAO+B,EAAKA,GAAKA,EAAKpD,MAAQA,EAAQwB,SAAWN,GACtDqC,EAAQpB,KAAI,SAACqB,GAAD,OACX,4BAAQC,IAAMD,EAASxD,MAAQwD,GAC5BA,QCRE,SAASE,EAAK9C,GAAQ,IAAD,EAK9BA,EAHF+C,UAAa3D,EAFmB,EAEnBA,MAAO4D,EAFY,EAEZA,YAAarB,EAFD,EAECA,SAAUsB,EAFX,EAEWA,OAAQC,EAFnB,EAEmBA,IAAKC,EAFxB,EAEwBA,WACxD7C,EAEEN,EAFFM,aACU8C,EACRpD,EADFoB,SAEF,OACE,8BACE,kBAACkB,EAAD,CACEC,MAAM,QACNlD,KAAK,SACLmD,GAAG,QACHpD,MAAQA,EACRkB,aAAeA,IAEjB,kBAACgC,EAAD,CACEC,MAAM,kBACNC,GAAG,cACHpD,MAAQ4D,EACR1C,aAAeA,IAEjB,kBAACoC,EAAD,CACEH,MAAM,QACNC,GAAG,WACHG,QAAUQ,EACV/D,MAAQuC,EACRrB,aAAeA,IAEjB,kBAACoC,EAAD,CACEH,MAAM,yBACNC,GAAG,SACHG,QAAU,CAAC,WAAY,0BAAqB,0BAC5CvD,MAAQ6D,EACR3C,aAAeA,IAEjB,kBAACoC,EAAD,CACEH,MAAM,MACNC,GAAG,MACHG,QAAU,CAAC,oBAAe,QAAS,WAAY,aAAc,YAC7DvD,MAAQ8D,EACR5C,aAAeA,IAEf8C,GCzCR,SAASC,EAAUC,GACjB,OAAOC,OAAOC,KAAKF,GAAUG,QAC3B,SAAC9B,GAAD,MAA2B,SAAbA,GAAoC,SAAbA,KAI1B,SAAS+B,IAAU,IAAD,EACGzD,mBAAS,CACzCuC,GAAI,EACJpD,MAAO,EACP4D,YAAa,GACbrB,SAAU,MACVsB,OAAQ,WACRC,IAAK,sBAPwB,mBACxBH,EADwB,KACbY,EADa,KASvBjE,EAAUkE,aAAY,SAAC1D,GAAD,OAAWA,EAAM2D,QAAvCnE,MATuB,EAUEkE,aAAY,SAAC1D,GAAD,OAAWA,EAAM4D,UAAtDX,EAVuB,EAUvBA,WAAY9B,EAVW,EAUXA,SACdjB,EAAWC,cAXc,4CA6B/B,8BAAA0D,EAAA,sEACyBC,MAAM,+CAD/B,cACQV,EADR,gBAE8BA,EAASW,OAFvC,OAEQvC,EAFR,OAGEtB,EAASZ,sBAAY,2BAAKuD,GAAN,IAAiBrB,oBACrCiC,GAAa,SAACzD,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBsC,GAAItC,EAAMsC,GAAK,OAJtD,4CA7B+B,sBAoC/B,OAvBA0B,qBAAU,YACO,uCAAG,8BAAAH,EAAA,sEACOC,MACrB,+CAFc,cACVV,EADU,YAIDD,EAJC,SAIeC,EAASW,OAJxB,mBAIVE,GAJU,cAKhB/D,EAASb,wBAAc4E,IALP,2CAAH,qDAOfC,KACC,CAAChE,IAeF,kBAACc,EAAD,CAAQxB,MAAQA,EAAQ2B,SAAWA,GACjC,kBAACyB,EAAD,CACEC,UAAS,2BAAQA,GAAR,IAAmBI,eAC5B7C,aAhBN,SAAsBC,GAAQ,IAAD,EACHA,EAAMC,OAAtBC,EADmB,EACnBA,KAAMrB,EADa,EACbA,MACduE,EAAa,2BAAKZ,GAAN,kBAAkBtC,EAAOrB,OAgBjC,4BAAQC,KAAK,SAASyB,QA1CG,4CA0CzB,wBHzBRwB,EAAM+B,aAAe,CACnBhF,KAAM,QIfOiF,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAYd,IACpC,kBAAC,IAAD,CAAOe,OAAK,EAACF,KAAK,IAAIC,UAAYzE,MCEpB2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BClBAC,EAAe,CAAErF,MAAO,I,YCCxBqF,EAAe,CAAE5B,WAAY,GAAI9B,SAAU,ICGjD,IAKe2D,EALMC,0BAAgB,CACnCpB,KFHa,WAAoD,IAA/B3D,EAA8B,uDAAtB6E,EAAcG,EAAQ,uCAChE,OAAQA,EAAO7F,MACf,IAAK,aACH,OAAO,2BAAKa,GAAZ,IAAmBR,MAAOwF,EAAO5F,UACnC,QACE,OAAOY,IEDT4D,ODHa,WAAoD,IAA/B5D,EAA8B,uDAAtB6E,EAAcG,EAAQ,uCAChE,OAAQA,EAAO7F,MACf,IAAK,oBACH,OAAO,2BAAKa,GAAZ,IAAmBiD,WAAY+B,EAAO5F,UACxC,IAAK,kBACH,OAAO,2BAAKY,GAAZ,IAAmBmB,SAAS,GAAD,mBAAMnB,EAAMmB,UAAZ,CAAsB6D,EAAO5F,YAC1D,QACE,OAAOY,MEHIiF,EAFDC,sBAAYC,EAASC,8BAAoBC,0BAAgBC,OCIvEC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAS,8BACf,kBAAC,IAAD,CAAUR,MAAQA,GAChB,kBAAC,EAAD,QAGJS,SAASC,eAAe,SLoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ca8dfa6.chunk.js","sourcesContent":["const inputEmail = (value) => ({\n  type: 'user/email',\n  payload: value,\n});\n\nconst setCurrencies = (value) => ({\n  type: 'wallet/currencies',\n  payload: value,\n});\n\nconst addExpenses = (value) => ({\n  type: 'wallet/expenses',\n  payload: value,\n});\n\nmodule.exports = {\n  inputEmail,\n  setCurrencies,\n  addExpenses,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { inputEmail } from '../actions/index';\n\n// Uso de expressão regular para validação de email,\n// fornecida pelos colegas Michael Caixas e Gustava Sant'Anna no Slack\nfunction isLoginValid(email, password) {\n  const MIN_LENGTH = 6;\n  const isPasswordValid = password.length >= MIN_LENGTH;\n  const parseEmail = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n  const isEmailValid = parseEmail.test(email);\n  return isEmailValid && isPasswordValid;\n}\n\nfunction handleSubmit(props) {\n  const { history } = props;\n  history.push('/carteira');\n}\n\nexport default function Login(props) {\n  const [state, setState] = useState({ email: '', password: '' });\n  const { email, password } = state;\n  const dispatch = useDispatch();\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n    setState({ ...state, [name]: value });\n  }\n\n  return (\n    <form>\n      <fieldset>\n        <input\n          type=\"email\"\n          name=\"email\"\n          data-testid=\"email-input\"\n          placeholder=\"email@email.com\"\n          value={ email }\n          onChange={ handleChange }\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          data-testid=\"password-input\"\n          placeholder=\"senha\"\n          value={ password }\n          onChange={ handleChange }\n        />\n        <button\n          disabled={ !isLoginValid(email, password) }\n          type=\"button\"\n          onClick={ () => {\n            dispatch(inputEmail(email));\n            handleSubmit(props);\n          } }\n        >\n          Entrar\n        </button>\n      </fieldset>\n    </form>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction sumExpenses(expenses) {\n  const sum = expenses\n    .map(\n      (expense) => parseInt(expense.value, 10)\n        * expense.exchangeRates[expense.currency].ask,\n    )\n    .reduce((acc, cur) => acc + cur, 0);\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL',\n  })\n    .format(sum)\n    .replace(',', '.');\n}\n\nexport default function Header(props) {\n  const { children: form, email, expenses } = props;\n\n  return (\n    <>\n      <header>\n        <span data-testid=\"email-field\">{`Email: ${email}`}</span>\n        <span data-testid=\"total-field\">\n          {`Despesa Total: ${sumExpenses(expenses)}`}\n          <span data-testid=\"header-currency-field\">BRL</span>\n        </span>\n      </header>\n      {form}\n    </>\n  );\n}\n\nHeader.propTypes = {\n  children: PropTypes.func,\n  email: PropTypes.string,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Input(props) {\n  const { label, type, id, value, handleChange } = props;\n  return (\n    <label htmlFor={ id }>\n      {label}\n      :\n      <input\n        type={ type }\n        name={ id }\n        id={ id }\n        placeholder={ label }\n        value={ value }\n        onChange={ handleChange }\n      />\n    </label>\n  );\n}\n\nInput.propTypes = {\n  state: PropTypes.shape({\n    label: PropTypes.string,\n    id: PropTypes.string,\n  }),\n  handleChange: PropTypes.func,\n}.isRequired;\n\nInput.defaultProps = {\n  type: 'text',\n};\n","// Como deixa a primeira option do select já selecionada?\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Select(props) {\n  const { label, id, options, value, handleChange } = props;\n  return (\n    <label htmlFor={ id }>\n      {label}\n      :\n      <select name={ id } id={ id } value={ value } onChange={ handleChange }>\n        {options.map((option) => (\n          <option key={ option } value={ option }>\n            {option}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n}\n\nSelect.propTypes = {\n  label: PropTypes.string,\n  id: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.String),\n  handleChange: PropTypes.func,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from './Input';\nimport Select from './Select';\n\nexport default function Form(props) {\n  const {\n    formState: { value, description, currency, method, tag, currencies },\n    handleChange,\n    children: button,\n  } = props;\n  return (\n    <form>\n      <Input\n        label=\"Valor\"\n        type=\"number\"\n        id=\"value\"\n        value={ value }\n        handleChange={ handleChange }\n      />\n      <Input\n        label=\"Descrição\"\n        id=\"description\"\n        value={ description }\n        handleChange={ handleChange }\n      />\n      <Select\n        label=\"Moeda\"\n        id=\"currency\"\n        options={ currencies }\n        value={ currency }\n        handleChange={ handleChange }\n      />\n      <Select\n        label=\"Método de pagamento\"\n        id=\"method\"\n        options={ ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'] }\n        value={ method }\n        handleChange={ handleChange }\n      />\n      <Select\n        label=\"Tag\"\n        id=\"tag\"\n        options={ ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'] }\n        value={ tag }\n        handleChange={ handleChange }\n      />\n      { button }\n    </form>\n  );\n}\n\nForm.propTypes = {\n  formState: PropTypes.objectOf(PropTypes.any),\n}.isRequired;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCurrencies, addExpenses } from '../actions/index';\nimport Header from '../components/header/Header';\nimport Form from '../components/form/Form';\n\nfunction filterAPI(response) {\n  return Object.keys(response).filter(\n    (currency) => currency !== 'USDT' && currency !== 'DOGE',\n  );\n}\n\nexport default function Wallet() {\n  const [formState, setFormState] = useState({\n    id: 0,\n    value: 0,\n    description: '',\n    currency: 'USD',\n    method: 'Dinheiro',\n    tag: 'Alimentação',\n  });\n  const { email } = useSelector((state) => state.user);\n  const { currencies, expenses } = useSelector((state) => state.wallet);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\n        'https://economia.awesomeapi.com.br/json/all',\n      );\n      const result = filterAPI(await response.json());\n      dispatch(setCurrencies(result));\n    };\n    fetchData();\n  }, [dispatch]);\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n    setFormState({ ...formState, [name]: value });\n  }\n\n  async function handleSubmit() {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const exchangeRates = await response.json();\n    dispatch(addExpenses({ ...formState, exchangeRates }));\n    setFormState((state) => ({ ...state, id: state.id + 1 }));\n  }\n\n  return (\n    <Header email={ email } expenses={ expenses }>\n      <Form\n        formState={ { ...formState, currencies } }\n        handleChange={ handleChange }\n      >\n        <button type=\"button\" onClick={ handleSubmit }>\n          Adicionar despesas\n        </button>\n      </Form>\n    </Header>\n  );\n}\n","// todo: rever se precisa de exact\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/carteira\" component={ Wallet } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = { email: '' };\n\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n  case 'user/email':\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n}\n","// todo: rever se precisa espalhar o estado\nconst initialState = { currencies: [], expenses: [] };\n\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n  case 'wallet/currencies':\n    return { ...state, currencies: action.payload };\n  case 'wallet/expenses':\n    return { ...state, expenses: [...state.expenses, action.payload] };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducers = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(\n  <Router basename=\"/trybe-project-trybewallet\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}